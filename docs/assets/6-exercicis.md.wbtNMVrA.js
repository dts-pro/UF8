import{_ as a,c as s,o as i,a4 as r}from"./chunks/framework.DIQKRKrM.js";const t="/UF8/uf8/Exercici_Astros.jpg",l="/UF8/uf8/Exercici_Mascotes.jpg",n="/UF8/uf8/Exercici_Banc.jpg",h=JSON.parse('{"title":"Exercicis (Java)","description":"","frontmatter":{},"headers":[],"relativePath":"6-exercicis.md","filePath":"6-exercicis.md"}'),o={name:"6-exercicis.md"};function c(m,e,u,p,d,g){return i(),s("div",null,e[0]||(e[0]=[r('<h1 id="exercicis-java" tabindex="-1">Exercicis (Java) <a class="header-anchor" href="#exercicis-java" aria-label="Permalink to &quot;Exercicis (Java)&quot;">​</a></h1><h2 id="exercici-1-producte" tabindex="-1">Exercici 1 - Producte <a class="header-anchor" href="#exercici-1-producte" aria-label="Permalink to &quot;Exercici 1 - Producte&quot;">​</a></h2><p>Suposem una classe Producte amb dos atributs:</p><ul><li>String nom</li><li>int quantitat</li></ul><p>Implementa aquesta classe amb un constructor (amb paràmetres) a més dels getters i setters dels seus dos atributs. No és necessari comprovar les dades introduïdes.</p><p>A continuació, en el programa principal fes el següent:</p><ol><li>Crea 5 instàncies de la Classe Producte.</li><li>Crea un ArrayList.</li><li>Afig les 5 instàncies de Producte al ArrayList.</li><li>Visualitza el contingut del ArrayList utilitzant Iterator.</li><li>Elimina dos element del ArrayList.</li><li>Inserida un nou objecte producte enmig de la llista.</li><li>Visualitza de nou el contingut de ArrayList utilitzant Iterator.</li><li>Elimina tots els valors del ArrayList.</li></ol><h2 id="exercici-2-astres" tabindex="-1">Exercici 2 - Astres <a class="header-anchor" href="#exercici-2-astres" aria-label="Permalink to &quot;Exercici 2 - Astres&quot;">​</a></h2><p>Define una jerarquia de classes que permeta emmagatzemar dades sobre els planetes i satèl·lits (llunes) que formen part del sistema solar.</p><p>Alguns atributs que necessitarem emmagatzemar són:</p><ul><li>Massa del cos.</li><li>Diàmetre mitjà.</li><li>Període de rotació sobre el seu propi eix.</li><li>Període de translació al voltant del cos que orbiten.</li><li>Distancia mitjana a aqueix cos.</li><li>etc.</li></ul><p>Defineix les classes necessàries contenint:</p><ul><li>Constructors.</li><li>Mètodes per a recuperar i emmagatzemes atributs.</li><li>Mètodes per a mostrar la informació de l&#39;objecte.</li></ul><p>Defineix un mètode, que donat un objecte del sistema solar (planeta o satèl·lit), imprimisca tota la informació que es disposa sobre el mateix (a més de la seua lista de satèl·lits si els tinguera).</p><p>El diagrama UML seria:</p><p><img src="'+t+'" alt="Esquema d&#39;herència"></p><p>Una possible solució seria crear una llista d&#39;objectes, inserir els planetes i satèl·lits (directament mitjançant codi o sol·licitant-los per pantalla) i després mostrar un xicotet menú que permeta a l&#39;usuari imprimir la informació de l&#39;astre que trie.</p><h2 id="exercici-3-mascotes" tabindex="-1">Exercici 3 - Mascotes <a class="header-anchor" href="#exercici-3-mascotes" aria-label="Permalink to &quot;Exercici 3 - Mascotes&quot;">​</a></h2><p>Implementa una classe anomenada <strong>Inventari</strong> que utilitzarem per a emmagatzemar referències a tots els animals existents en una botiga de mascotes.</p><p>Aquesta classe ha de complir amb els següents requisits:</p><ul><li>A la botiga existiran 4 tipus d&#39;animals: gossos, gats, lloros i canaris.</li><li>Els animals han d&#39;emmagatzemar-se en un ArrayList privat dins de la classe Inventari.</li><li>La classe ha de permetre realitzar les següents accions: <ul><li>Mostrar la llista d&#39;animals (sols tipus i nom, 1 línia per animal).</li><li>Mostrar totes les dades d&#39;un animal concret.</li><li>Mostrar totes les dades de tots els animals.</li><li>Inserir animals en l’inventari.</li><li>Eliminar animals de l&#39;inventari.</li><li>Buidar l&#39;inventari.</li></ul></li></ul><p>Implementa les altres classes necessàries per a la classe Inventari.</p><p>El diagrama UML seria:</p><p><img src="'+l+'" alt="Esquema d&#39;herència"></p><h2 id="exercici-4-–-banc" tabindex="-1">Exercici 4 – Banc <a class="header-anchor" href="#exercici-4-–-banc" aria-label="Permalink to &quot;Exercici 4 – Banc&quot;">​</a></h2><p>Farem una aplicació que simule el funcionament d&#39;un banc.</p><p>Crea una classe <strong>CompteBancari</strong> amb els atributs: <strong>IBAN</strong> i <strong>saldo</strong>. Implementa mètodes per a :</p><ul><li>Consultar els atributs.</li><li>Ingressar diners.</li><li>Retirar diners.</li><li>Traspassar diners d&#39;un compte a una altre.</li></ul><p>Per als tres últims mètodes pot utilitzar-se internament un mètode privat més general anomenat <strong>afegir(...)</strong> que afija una quantitat (positiva o negativa) al saldo.</p><p>També hi haurà un atribut comú a totes les instàncies anomenat <strong>interesAnualBasic</strong>, que en principi pot ser constant.</p><p>La classe ha de ser <strong>abstracta</strong> i ha de tindre un mètode <strong>calcularInteressos()</strong> que es deixarà sense implementar.</p><p>També pot ser útil implementar un mètode per a mostrar les dades del compte.</p><p>D&#39;aquesta classe heretaran dues subclasses: <strong>CompteCorrent</strong> i <strong>CompteEstalvi</strong>. La diferència entre ambdues serà la manera de calcular els interessos:</p><ul><li>A la primera se li incrementarà el saldo tenint en compte l&#39;interés anual bàsic.</li><li>La segona tindrà una constant de classe anomenada <strong>saldoMinim</strong>. Si no s&#39;arriba a aquest saldo l&#39;interés serà la meitat de l&#39;interés bàsic. Si se supera el saldo mínim l&#39;interés aplicat serà el doble de l&#39;interés anual bàsic.</li></ul><p>Implementa una classe principal amb funció main per a provar el funcionament de les tres classes: Crea diversos comptes bancaris de diferents tipus, poden estar en un ArrayList si ho desitges; prova de realitzar ingressos, retirades i transferències; calcula els interessos i mostra&#39;ls per pantalla; etc.</p><p>El diagrama UML seria:</p><p><img src="'+n+'" alt="Esquema d&#39;herència"></p><h2 id="exercici-5-–-empresa-i-empleats" tabindex="-1">Exercici 5 – Empresa i empleats <a class="header-anchor" href="#exercici-5-–-empresa-i-empleats" aria-label="Permalink to &quot;Exercici 5 – Empresa i empleats&quot;">​</a></h2><p>Implementarem dues classes que permeten gestionar dades d&#39;empreses i els seus empleats.</p><p>Els <strong>empleats</strong> tenen les següents característiques:</p><ul><li>Un empleat té nom, DNI, sou brut (mensual), edat, telèfon i adreça.</li><li>El nom i DNI d&#39;un objecte no pot variar.</li><li>És obligatori que tots els empleats tinguen almenys definit el seu nom, DNI i el sou brut. Les altres dades no són obligatoris.</li><li>Serà necessari un mètode per a imprimir per pantalla la informació d&#39;un empleat.</li><li>Serà necessari un mètode per a calcular el sou net d&#39;un empleat. El sou net es calcula descomptant del sou brut un percentatge que depén de l&#39;IRPF. El percentatge de l&#39;IRPF depén del sou brut anual de l&#39;empleat (sou brut x 12 pagues).<strong>(*)</strong></li></ul><table tabindex="0"><thead><tr><th><strong>Sou brut anual</strong></th><th><strong>IRPF</strong></th></tr></thead><tbody><tr><td>Inferior a 12.000€</td><td>20%</td></tr><tr><td>De 12.000€ a 25.000€</td><td>30%</td></tr><tr><td>Més de 25.000€</td><td>40%</td></tr></tbody></table><p>Per exemple, un empleat amb un sou brut anual de 17.000 € tindrà un 30% d&#39;IRPF. Per a calcular el seu sou net mensual es descomptarà un 30% al seu sou brut mensual.</p><p>Les <strong>empreses</strong> tenen les següents característiques:</p><ul><li>Una empresa té nom i CIF (dades que no poden variar), a més de telèfon, adreça i empleats. Quan es crea una nova empresa aquesta manca d&#39;empleats.</li><li>Seran necessaris mètodes per a: <ul><li>Afegir i eliminar empleats a l&#39;empresa.</li><li>Mostrar per pantalla la informació de tots els empleats.</li><li>Mostrar per pantalla el DNI, sou brut i net de tots els empleats.</li><li>Calcular la suma total de sous bruts de tots els empleats.</li><li>Calcular la suma total de sous nets de tots els empleats.</li></ul></li></ul><p><strong>Implementa les classes Emprat i Empresa</strong> amb els atributs oportuns, un constructor, els getters/setters oportuns i els mètodes indicats. Pots afegir més mètodes si ho veus necessari. Aquestes classes no han de realitzar cap mena d&#39;entrada per teclat.</p><p><strong>Implementa també una classe Programa</strong> amb una funció main per a realitzar proves: Crear una o diverses empreses, crear empleats, afegir i eliminar empleats a les empreses, llistar tots els empleats, mostrar el total de sous bruts i nets, etc.</p><p><strong>(*)</strong> L&#39;IRPF realment és més complex però s&#39;ha simplificat per a no complicar massa aquest exercici.</p><h2 id="exercici-6-vehicles" tabindex="-1">Exercici 6 - Vehicles <a class="header-anchor" href="#exercici-6-vehicles" aria-label="Permalink to &quot;Exercici 6 - Vehicles&quot;">​</a></h2><p><strong>És molt aconsellable fer el disseny UML abans de començar a programar</strong>.</p><p>Deus crear diverses classes per a un programari d&#39;una empresa de transport. Implementa la jerarquia de classes necessària per a complir els següents criteris:</p><ul><li>Els vehicles de l&#39;empresa de transport poden ser terrestres, aquàtics i aeris. Els vehicles terrestres poden ser cotxes i motos. Els vehicles aquàtics poden ser vaixells i submarins. Els vehicles aeris poden ser avions i helicòpters.</li><li>Tots els vehicles tenen matrícula i model (dades que no poden canviar). La matrícula dels cotxes terrestres han d&#39;estar formada per 4 números i 3 lletres. La dels vehicles aquàtics per entre 3 i 10 lletres. La dels vehicles aeris per 4 lletres i 6 números.</li><li>Els vehicles terrestres tenen un nombre de rodes (dada que no pot canviar).</li><li>Els vehicles aquàtics tenen eslora (dada que no pot canviar).</li><li>Els vehicles aeris tenen un nombre de seients (dada que no pot canviar).</li><li>Els cotxes poden tindre aire condicionat o no tindre’n.</li><li>Les motos tenen un color.</li><li>Els vaixells poden tindre motor o no tindre’n.</li><li>Els submarins tenen una profunditat màxima.</li><li>Els avions tenen un temps màxim de vol.</li><li>Els helicòpters tenen un nombre d&#39;hèlices.</li><li>No es permeten vehicles genèrics, és a dir, no es deuen poder instanciar objectes que siguen vehicles sense més. Però ha de ser possible instanciar vehicles terrestres, aquàtics o aeris genèrics (és a dir, que no siguen cotxes, motos, vaixells, submarins, avions o helicòpters).</li><li>El disseny ha d&#39;obligar al fet que totes les classes de vehicles tinguen un mètode imprimir() que imprimisca per pantalla la informació del vehicle en una sola línia.</li></ul><p>Implementa totes les classes necessàries amb: atributs, constructor amb paràmetres, getters/setters i el mètode imprimir. Utilitza <strong>abstracció</strong> i <strong>herència</strong> de la forma més apropiada.</p><p>Implementa també una classe Programa per a fer algunes proves: Instància diversos vehicles de tota mena (cotxes, motos, vaixells, submarins, avions i helicòpters) així com vehicles genèrics (terrestres, aquàtics i aeris). Crea un ArrayList i afegis tots els vehicles. Recorre la llista i crida al mètode imprimir de tots els vehicles.</p><h2 id="exercici-7-figures" tabindex="-1">Exercici 7 - Figures <a class="header-anchor" href="#exercici-7-figures" aria-label="Permalink to &quot;Exercici 7 - Figures&quot;">​</a></h2><p>Implementa una <strong>interfície</strong> anomenada <strong>iFigura2D</strong> que declare els mètodes:</p><ul><li>double perimetre(): Per a retornar el perímetre de la figura</li><li>double area(): Per a retornar l&#39;àrea de la figura</li><li>void escalar(double escala): Per a escalar la figura (augmentar o disminuir la seua grandària). Només cal multiplicar els atributs de la figura per l&#39;escala (&gt; 0).</li><li>void imprimir(): Per a mostrar la informació de la figura (atributs, perímetre i àrea) en una sola línia.</li></ul><p>Existeixen 4 tipus de figures.</p><ul><li><strong>Quadrat</strong>: Els seus quatre costats són iguals.</li><li><strong>Rectangle</strong>: Tenen ample i alt.</li><li><strong>Triangle</strong>: Tenen ample i alt.</li><li><strong>Cercle</strong>: Tenen radi.</li></ul><p>Crea les 4 classes de figures de manera que implementen la interfície iFigura2D. Defineix els seus mètodes.</p><p>Crea una classe ProgramaFiguras amb un main en el qual realitzar les següents proves:</p><ol><li>Crea un ArrayList figures.</li><li>Afig figures de diversos tipus.</li><li>Mostra la informació de totes les figures.</li><li>Escala totes les figures amb escala = 2.</li><li>Mostra de nou la informació de totes les figures.</li><li>Escala totes les figures amb escala = 0.1.</li><li>Mostra de nou la informació de totes les figures.</li></ol><h2 id="exercici-8-cas-practic-dawbank" tabindex="-1">Exercici 8 - Cas pràctic DawBank <a class="header-anchor" href="#exercici-8-cas-practic-dawbank" aria-label="Permalink to &quot;Exercici 8 - Cas pràctic DawBank&quot;">​</a></h2><p>L&#39;empresa <i>LibreCoders</i> us ha contractat per desenvolupar un programari de gestió d&#39;un compte bancari per a la cooperativa de banca ètica i sostenible DawBank. Es tracta d&#39;una aplicació Java formada per una classe principal DawBank i una altra anomenada CompteBancari.</p><p>El programa demanarà les dades necessàries per crear un compte bancari. Si són vàlids, crearà el compte i mostrarà el menú principal per permetre actuar sobre el compte. Després de cada acció es tornarà a mostrar el menú.</p><ol><li><strong>Dades del compte</strong>. Mostrarà l&#39;IBAN, el titular i el saldo.</li><li><strong>IBAN</strong>. Mostrarà l&#39;IBAN.</li><li><strong>Titular</strong>. Mostrarà el titular.</li><li><strong>Saldo</strong>. Mostrarà el saldo disponible.</li><li><strong>Ingrés</strong>. Demanarà la quantitat a ingressar i realitzarà l&#39;ingrés si és possible.</li><li><strong>Retirada</strong>. Demanarà la quantitat a retirar i realitzarà la retirada si és possible.</li><li><strong>Moviments</strong>. Mostrarà una llista amb l&#39;historial de moviments.</li><li><strong>Eixir</strong>. Finalitza el programa.</li></ol><p><strong>Classe CompteBancari</strong><br> Un compte bancari té com a dades associades l&#39;IBAN (International Bank Account Number, format per dues lletres i 22 números, per exemple ES6621000418401234567891), el titular (un nom complet), el saldo (diners en euros) i els moviments (històric dels moviments realitzats al compte, un màxim de 100(*) per simplificar).</p><p>Quan es cree un compte és obligatori que tinga un IBAN i un titular (que no podran canviar mai). El saldo serà de 0 euros i el compte no tindrà moviments associats.</p><p>El saldo només pot variar quan es produeix un ingrés (entra diners al compte) o una retirada (ix diners del compte). En tots dos casos s&#39;haurà de registrar l&#39;operació als moviments. Els ingressos i les retirades només poden ser de valors superiors a zero.</p><p>El saldo d&#39;un compte mai no podrà ser inferior a -50(*) euros. Si es produeix un moviment que deixe el compte amb un saldo negatiu (no inferior a -50) caldrà mostrar el missatge “AVÍS: Saldo negatiu”. Si es produeix un moviment superior a 3.000(*) euros, es mostrarà el missatge “AVÍS: Notificar a hisenda”.</p><p>No es realitzarà cap mena d&#39;entrada per teclat. L&#39;única eixida per pantalla permesa són els dos missatges d&#39;avís esmentats a dalt, cap altra.</p><p>(*)Aquests valors no poden variar i són iguals per a tots els comptes bancaris.</p><p><strong>Classe DawBank</strong><br> Classe principal amb funció main. Encarregada d&#39;interactuar amb l&#39;usuari, mostrar el menú principal, donar feedback i/o missatges d&#39;error, etc. Utilitzarà la classe CompteBancari. Podeu implementar les funcions que considereu oportunes.</p>',73)]))}const x=a(o,[["render",c]]);export{h as __pageData,x as default};
